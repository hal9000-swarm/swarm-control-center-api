openapi: "3.0.1"
info:
  version: 1.0.0
  title: Swarm Control Center API
  license:
    name: commercial license
  contact:
    name: Michael Rogger
    email: michael.rogger@swarm-analytics.com
    url: https://swarm-analytics.com
servers:
  - url: http://cc.swarm.example.com/v1
tags:
  - name: Boxes
    description: 'Box related APIs'

paths:
  /boxes/{boxId}:
    get:
      summary: Retrieve an individual box
      operationId: getBoxById
      tags:
        - Boxes
      parameters:
        - $ref: "#/components/parameters/box-id-property"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Box"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    put:
      summary: Update information related to a box
      operationId: updateBox
      tags:
        - Boxes
      parameters:
        - $ref: "#/components/parameters/box-id-property"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Box"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Box"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
  /boxes:
    get:
      summary: List all boxes
      operationId: listBoxes
      tags:
        - Boxes
      parameters:
        - $ref: "#/components/parameters/limit-property"
        - $ref: "#/components/parameters/offset-property"
        - $ref: "#/components/parameters/box-id-property"
        # TODO sort key and sort direction
        # TODO filtering
      responses:
        # TODO include responses from the 2xx,3xx,4xx, and 5xx range (separate PR)
        '200':
          description: An array of boxes
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Box"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"

components:
  schemas:
    Box:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: Friendly name of the box
          example: 7th NE parking garage entrance
        type:
          type: string
          description: The swarm perception box type
          example: P100
        version:
          type: string
          description: The version running on the box
          example: 1.0
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        configurationId:
          type: string
          format: uuid
          description: The uuid for the configuration item
        statusId:
          type: string
          format: uuid
          description: The uuid for the status item
    Tag:
      type: object
      properties:
        name:
          type: string
          example: Roxxon Energy Corporation

  parameters:
    box-id-property:
      description: A guid representing the unique box id
      name: boxId
      in: path
      required: true
      schema:
        type: string
        pattern: uuid

    # pagination
    offset-property:
      description: An offset to start with the paginated response.
      name: offset
      in: query
      schema:
        type: integer
        example: 40
    limit-property:
      description: How many items to show. Used for pagination.
      name: limit
      in: query
      schema:
        type: integer
        example: 40

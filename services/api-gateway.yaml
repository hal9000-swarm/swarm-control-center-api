openapi: "3.0.1"
info:
  version: 1.0.0
  title: Swarm Control Center API
  license:
    name: commercial license
  contact:
    name: Michael Rogger
    email: michael.rogger@swarm-analytics.com
    url: https://swarm-analytics.com
  description: |
    ## Security
    The application makes use of oAuth2 for authenticating a user.
    Users will be assigne to roles using the [Azure AD - Enterprise Applications](https://portal.azure.com/#blade/Microsoft_AAD_IAM/StartboardApplicationsMenuBlade/AllApps/menuId/).

    A role will be assigned various permissions.
    Note that permissions will not be manifested in AD.
    These permissions are to be defined in both the forntend and the backend application.

    The following table gives an overview on the configured roles and their mapped permissions.


    | Role | Permission |
    |-----|-----|
    | Superadmin   | `operators:read`, `operators:write`  |
    | Operator   | `boxes:read`, `boxes:write`, `configurations:read`, `configurations:write` |


    For each API call the frontend application provides a `JWS` that contains the assigned roles.
    The API can trust the signature or query AD for retrieving the assosciated roles to a user for determining if the user can invoke the operation.

servers:
  - url: http://cc.swarm.example.com/v1
tags:
  - name: Boxes
    description: 'Box related APIs'
# require oauth2 for all API calls
security:
  - oauth2: []    

paths:
  /boxes/{boxId}:
    get:
      summary: Retrieve an individual box
      operationId: getBoxById
      tags:
        - Boxes
      parameters:
        - $ref: "#/components/parameters/box-id-property"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Box"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    put:
      summary: Update information related to a box
      operationId: updateBox
      tags:
        - Boxes
      parameters:
        - $ref: "#/components/parameters/box-id-property"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Box"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Box"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
  /boxes:
    get:
      summary: List all boxes
      operationId: listBoxes
      tags:
        - Boxes
      parameters:
        - $ref: "#/components/parameters/limit-property"
        - $ref: "#/components/parameters/offset-property"
        # TODO sort key and sort direction
        # TODO filtering
      responses:
        # TODO include responses from the 2xx,3xx,4xx, and 5xx range (separate PR)
        '200':
          description: An array of boxes
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Box"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"

  /configurations/{configurationId}:
    get:
      summary: Retrieve an individual configuration
      operationId: getConfigurationById
      tags:
        - Configurations
      parameters:
        - $ref: "#/components/parameters/configuration-id-property"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/MqttConfiguration'
                  - $ref: '#/components/schemas/CameraConfiguration'
                discriminator:
                  propertyName: objectType
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    put:
      summary: Update information related to a configuration
      operationId: updateConfiguration
      tags:
        - Configurations
      parameters:
        - $ref: "#/components/parameters/configuration-id-property"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/MqttConfiguration'
                - $ref: '#/components/schemas/CameraConfiguration'
              discriminator:
                propertyName: objectType
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/MqttConfiguration'
                  - $ref: '#/components/schemas/CameraConfiguration'
                discriminator:
                  propertyName: objectType
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"

  /eventTrigger/{eventTriggerId}:
    get:
      summary: Retrieve an individual event trigger
      operationId: getEventTriggerById
      tags:
        - EventTriggers
      parameters:
        - $ref: "#/components/parameters/event-trigger-id-property"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CrossingLine'
                  - $ref: '#/components/schemas/RegionOfInterest'
                discriminator:
                  propertyName: objectType
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    put:
      summary: Update information related to an event trigger
      operationId: updateEventTrigger
      tags:
        - EventTriggers
      parameters:
        - $ref: "#/components/parameters/event-trigger-id-property"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CrossingLine'
                - $ref: '#/components/schemas/RegionOfInterest'
              discriminator:
                propertyName: objectType
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CrossingLine'
                  - $ref: '#/components/schemas/RegionOfInterest'
                discriminator:
                  propertyName: objectType
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"

components:
  schemas:
    Box:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: Friendly name of the box
          example: 7th NE parking garage entrance
        type:
          type: string
          description: The swarm perception box type
          example: P100
        version:
          type: string
          description: The version running on the box
          example: 1.0
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        mqttConfigurationId:
          type: string
          format: uuid
          description: The uuid for the configuration item
        cameraConfigurationId:
          type: string
          format: uuid
          description: The uuid for the configuration item
        statusId:
          type: string
          format: uuid
          description: The uuid for the status item
    Tag:
      type: object
      properties:
        name:
          type: string
          example: Roxxon Energy Corporation

    ConnectionConfiguration:
      type: object
      properties:
        objectType:
          type: string
        status:
          type: string
          enum:
            - desired
            - deployed
          example: deployed
        username:
          type: string
          example: user
        password:
          type: string
          example: password
        protocol:
          type: string
          enum:
            - http
            - rtsp
          example: http
        host:
          type: string
          example: 192.168.0.100
        port:
          type: integer
          example: 554
        path:
          type: string
          example: live.sdp

    MqttConfiguration:
      type: object
      allOf:
        - $ref: '#/components/schemas/ConnectionConfiguration'
      properties:
        topic:
          type: string

    CameraConfiguration:
      type: object
      allOf:
        - $ref: '#/components/schemas/ConnectionConfiguration'
      properties:
        vendor:
          type: string
        eventTriggers:
          type: array
          items:
            type: string
            pattern: uuid

    CrossingLine:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 8th SE crosswalk
        objectType:
          type: string
          example: crossingLine
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/Point'
          minItems: 2
          maxItems: 2

    RegionOfInterest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Bike parking spots
        objectType:
          type: string
          example: regionOfInterest
        triggerAction:
          type: string
          enum:
            - timeBased
            - eventBased
          example: timeBased
        schedule:
          type: string
        # Does a Cron type expression makes sense here?
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/Point'
          minItems: 4
          maxItems: 4

    Point:
      type: object
      properties:
        pointX:
          type: string
          example: 27
        pointY:
          type: string
          example: 33

  parameters:
    box-id-property:
      description: A guid representing the unique box id
      name: boxId
      in: path
      required: true
      schema:
        type: string
        pattern: uuid
    configuration-id-property:
      description: A guid representing the unique configuration id
      name: configurationId
      in: path
      required: true
      schema:
        type: string
        pattern: uuid
    event-trigger-id-property:
      description: A guid representing the unique event trigger id
      name: eventTriggerId
      in: path
      required: true
      schema:
        type: string
        pattern: uuid

    # pagination
    offset-property:
      description: An offset to start with the paginated response.
      name: offset
      in: query
      schema:
        type: integer
        example: 40
    limit-property:
      description: How many items to show. Used for pagination.
      name: limit
      in: query
      schema:
        type: integer
        example: 40

  securitySchemes:
    oauth2:
      $ref: "../schemas/commons.yaml#/securitySchemes/oauth2"
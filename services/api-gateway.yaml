openapi: "3.0.1"
info:
  version: 1.0.0
  title: Swarm Control Center API
  license:
    name: commercial license
  contact:
    name: Michael Rogger
    email: michael.rogger@swarm-analytics.com
    url: https://swarm-analytics.com
  description: |
    ## Security
    The application makes use of oAuth2 for authenticating a user.
    Users will be assigne to roles using the [Azure AD - Enterprise Applications](https://portal.azure.com/#blade/Microsoft_AAD_IAM/StartboardApplicationsMenuBlade/AllApps/menuId/).

    A role will be assigned various permissions.
    Note that permissions will not be manifested in AD.
    These permissions are to be defined in both the forntend and the backend application.

    The following table gives an overview on the configured roles and their mapped permissions.


    | Role | Permission |
    |-----|-----|
    | Superadmin   | `operators:read`, `operators:write`  |
    | Operator   | `boxes:read`, `boxes:write`, `configurations:read`, `configurations:write` |


    For each API call the frontend application provides a `JWS` that contains the assigned roles.
    The API can trust the signature or query AD for retrieving the assosciated roles to a user for determining if the user can invoke the operation.

servers:
  - url: http://cc.swarm.example.com/v1
tags:
  - name: Boxes
    description: 'Box related APIs'
# require oauth2 for all API calls
security:
  - oauth2: []

paths:
  /boxes/{boxId}:
    get:
      summary: Retrieve an individual box
      operationId: getBoxById
      tags:
        - Boxes
      parameters:
        - $ref: "#/components/parameters/box-id-property"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Box"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    put:
      summary: Update information related to a box
      operationId: updateBox
      tags:
        - Boxes
      parameters:
        - $ref: "#/components/parameters/box-id-property"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Box"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Box"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
  /boxes:
    get:
      summary: List all boxes
      operationId: listBoxes
      tags:
        - Boxes
      parameters:
        - $ref: "#/components/parameters/limit-property"
        - $ref: "#/components/parameters/offset-property"
        # TODO sort key and sort direction
        # TODO filtering
      responses:
        # TODO include responses from the 2xx,3xx,4xx, and 5xx range (separate PR)
        '200':
          description: An array of boxes
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Box"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"

components:
  schemas:
    Box:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-faker: random.uuid
          example: 676cac42-f3d6-416d-ac83-3f54f1c0bb43
        name:
          type: string
          description: Friendly name of the box
          x-faker: address.streetAddress
          example: 7th NE parking garage entrance
        type:
          type: string
          description: The swarm perception box type
          example: P100
        version:
          type: string
          description: The version running on the box
          x-faker: system.semver
          example: 1.0
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        configurationId:
          type: string
          format: uuid
          x-faker: random.uuid
          example: b3455e0b-65d8-5be8-8da9-8993103493a8
          description: The uuid for the configuration item
        statusId:
          type: string
          format: uuid
          x-faker: random.uuid
          example: 2ab91de8-a30a-ee5d-2ae9-a2899488c90
          description: The uuid for the status item
    Tag:
      type: object
      properties:
        name:
          type: string
          x-faker: company.companyName
          example: Roxxon Energy Corporation

  parameters:
    box-id-property:
      description: A guid representing the unique box id
      name: boxId
      in: path
      required: true
      schema:
        type: string
        pattern: uuid

    # pagination
    offset-property:
      description: An offset to start with the paginated response.
      name: offset
      in: query
      schema:
        type: integer
        example: 40
    limit-property:
      description: How many items to show. Used for pagination.
      name: limit
      in: query
      schema:
        type: integer
        example: 40

  securitySchemes:
    oauth2:
      $ref: "../schemas/commons.yaml#/securitySchemes/oauth2"
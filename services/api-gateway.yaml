openapi: "3.0.1"
info:
  version: 1.0.1
  title: Swarm Control Center API
  license:
    name: commercial license
  contact:
    name: Michael Rogger
    email: michael.rogger@swarm-analytics.com
    url: https://swarm-analytics.com
  description: |
    ## Security
    The application makes use of oAuth2 for authenticating a user.
    Users will be assigne to roles using the [Azure AD - Enterprise Applications](https://portal.azure.com/#blade/Microsoft_AAD_IAM/StartboardApplicationsMenuBlade/AllApps/menuId/).

    A role will be assigned various permissions.
    Note that permissions will not be manifested in AD.
    These permissions are to be defined in both the forntend and the backend application.

    The following table gives an overview on the configured roles and their mapped permissions.


    | Role | Permission |
    |-----|-----|
    | Superadmin   | `operators:read`, `operators:write`  |
    | Operator   | `boxes:read`, `boxes:write`, `configurations:read`, `configurations:write` |


    For each API call the frontend application provides a `JWS` that contains the assigned roles.
    The API can trust the signature or query AD for retrieving the assosciated roles to a user for determining if the user can invoke the operation.

servers:
  - url: https://swarm-control-center-api-gateway.azurewebsites.net/v1
tags:
  - name: Boxes
    description: 'Box related APIs'
# require oauth2 for all API calls
security:
  - oauth2: []

paths:
  /boxes/{boxId}:
    get:
      summary: Retrieve an individual box
      operationId: getBoxById
      tags:
        - Boxes
      parameters:
        - $ref: "#/components/parameters/box-id-property"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Box"
              examples:
                61b9ecee-2174-11ea-978f-2e728ce88125:
                  summary: An example box
                  value:
                    id: 61b9ecee-2174-11ea-978f-2e728ce88125
                    name: 7th NE parking garage entrance2
                    model: UrbanTraffic
                    type: P100
                    version: 1.0.0
                    mqttConfigurationId: 85335c0a-2174-11ea-978f-2e728ce88125
                    cameraConfigurationId: 7372f264-2174-11ea-978f-2e728ce88125
                    statusId: 203ef868-2174-11ea-978f-2e728ce88125
                6f2801ae-2174-11ea-978f-2e728ce88125:
                  summary: Another example box
                  value:
                    id: 6f2801ae-2174-11ea-978f-2e728ce88125
                    name:
                    model: ParkingFisheye
                    type: P100
                    version: 1.0.0
                    mqttConfigurationId:
                    cameraConfigurationId:
                    statusId: 499fe654-2174-11ea-978f-2e728ce88125
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    put:
      summary: Update information related to a box
      operationId: updateBox
      tags:
        - Boxes
      parameters:
        - $ref: "#/components/parameters/box-id-property"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Box"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Box"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
  /boxes:
    get:
      summary: List all boxes
      operationId: listBoxes
      tags:
        - Boxes
      parameters:
        - $ref: "#/components/parameters/limit-property"
        - $ref: "#/components/parameters/offset-property"
        # TODO sort key and sort direction
        # TODO filtering
      responses:
        # TODO include responses from the 2xx,3xx,4xx, and 5xx range (separate PR)
        '200':
          description: An array of boxes
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Box"
                example:
                  - id: 61b9ecee-2174-11ea-978f-2e728ce88125
                    name: 7th NE parking garage entrance2
                    model: UrbanTraffic
                    type: P100
                    version: 1.0.0
                    mqttConfigurationId: 85335c0a-2174-11ea-978f-2e728ce88125
                    cameraConfigurationId: 7372f264-2174-11ea-978f-2e728ce88125
                    statusId: 203ef868-2174-11ea-978f-2e728ce88125
                  - id: 6f2801ae-2174-11ea-978f-2e728ce88125
                    name:
                    model: ParkingFisheye
                    type: P100
                    version: 1.0.0
                    mqttConfigurationId:
                    cameraConfigurationId:
                    statusId: 499fe654-2174-11ea-978f-2e728ce88125
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"

  /boxes/{boxId}/getFrame:
    get:
      summary: Get a current frame from the box
      operationId: getCurrentFrameForBoxById
      tags:
        - Boxes
      parameters:
        - name: boxId
          in: path
          required: true
          description: The id of the box to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"

# APIs related to configuration objects
# The UUID of the configuration is equal to the UUID of the box
  /configurations/mqtt/{configurationId}:
    get:
      summary: Retrieve an individual configuration
      operationId: getMqttConfigurationById
      tags:
        - MQTT Configurations
      parameters:
        - $ref: "#/components/parameters/configuration-id-property"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MqttConfiguration'
              examples:
                85335c0a-2174-11ea-978f-2e728ce88125:
                  summary: A MQTT config object
                  value:
                    id: 85335c0a-2174-11ea-978f-2e728ce88125
                    status: deployed
                    username: user
                    password: password
                    host: 192.168.0.100
                    port: 554
                    path: live.sdp
                    topic: Park
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    put:
      summary: Update information related to a configuration
      operationId: updateMqttConfiguration
      tags:
        - MQTT Configurations
      parameters:
        - $ref: "#/components/parameters/configuration-id-property"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MqttConfiguration'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MqttConfiguration'
              examples:
                7372f264-2174-11ea-978f-2e728ce88125:
                  summary: A Camera config object
                  value:
                    id: 7372f264-2174-11ea-978f-2e728ce88125
                    status: deployed
                    username: user
                    password: password
                    host: 192.168.0.100
                    port: 554
                    path: live.sdp
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    delete:
      summary: Delete a configuration
      operationId: deleteMqttConfiguration
      tags:
        - MQTT Configurations
      parameters:
        - $ref: "#/components/parameters/configuration-id-property"
      responses:
        '204':
          description: Expected response to a valid request
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
# The UUID of the configuration is equal to the UUID of the box
  /configurations/camera/{configurationId}:
    get:
      summary: Retrieve an individual configuration
      operationId: getCameraConfigurationById
      tags:
        - Camera Configurations
      parameters:
        - $ref: "#/components/parameters/configuration-id-property"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CameraConfiguration'
              examples:
                7372f264-2174-11ea-978f-2e728ce88125:
                  summary: A Camera config object
                  value:
                    id: 7372f264-2174-11ea-978f-2e728ce88125
                    status: deployed
                    username: user
                    password: password
                    host: 192.168.0.100
                    port: 554
                    path: live.sdp
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    put:
      summary: Update information related to a configuration
      operationId: updateCameraConfiguration
      tags:
        - Camera Configurations
      parameters:
        - $ref: "#/components/parameters/configuration-id-property"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CameraConfiguration'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CameraConfiguration'
              examples:
                7372f264-2174-11ea-978f-2e728ce88125:
                  summary: A Camera config object
                  value:
                    id: 7372f264-2174-11ea-978f-2e728ce88125
                    status: deployed
                    username: user
                    password: password
                    host: 192.168.0.100
                    port: 554
                    path: live.sdp
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    delete:
      summary: Delete a configuration
      operationId: deleteCameraConfiguration
      tags:
        - Camera Configurations
      parameters:
        - $ref: "#/components/parameters/configuration-id-property"
      responses:
        '204':
          description: Expected response to a valid request
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"

# APIs related to event triggers
  /boxes/{boxId}/eventTriggers:
    get:
      summary: List all eventTriggers for a box
      operationId: listEventTriggers
      tags:
        - Boxes
      parameters:
        - $ref: "#/components/parameters/box-id-property"
      responses:
        # TODO include responses from the 2xx,3xx,4xx, and 5xx range (separate PR)
        '200':
          description: All Eventtriggers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventTriggers"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"

  /boxes/{boxId}/eventTriggers/heatMap:
    get:
       summary: Retrieve the current heatmap setting
       operationId: getHeatMap
       tags:
        - HeatmapEventTriggers
       parameters:
        - $ref: "#/components/parameters/box-id-property"
       responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeatMap'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    put:
      summary: Set the heatmap setting
      operationId: updateHeatMap
      tags:
        - HeatmapEventTriggers
      parameters:
        - $ref: "#/components/parameters/box-id-property"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeatMap'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeatMap'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"

  /boxes/{boxId}/eventTriggers/crossingLine/{eventTriggerId}:
    get:
      summary: Retrieve an individual event trigger
      operationId: getCrossingLineEventTriggerById
      tags:
        - CrossingLineEventTriggers
      parameters:
        - $ref: "#/components/parameters/event-trigger-id-property"
        - $ref: "#/components/parameters/box-id-property"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossingLine'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    put:
      summary: Update information related to an event trigger
      operationId: updateCrossingLineEventTrigger
      tags:
        - CrossingLineEventTriggers
      parameters:
        - $ref: "#/components/parameters/event-trigger-id-property"
        - $ref: "#/components/parameters/box-id-property"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrossingLine'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossingLine'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    delete:
      summary: Delete an event trigger
      operationId: deleteCrossingLineEventTrigger
      tags:
        - CrossingLineEventTriggers
      parameters:
        - $ref: "#/components/parameters/event-trigger-id-property"
        - $ref: "#/components/parameters/box-id-property"
      responses:
        '204':
          description: Expected response to a valid request
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"

  /boxes/{boxId}/eventTriggers/regionOfInterest/{eventTriggerId}:
    get:
      summary: Retrieve an individual event trigger
      operationId: getRegionOfInterestEventTriggerById
      tags:
        - RegionOfInterestEventTriggers
      parameters:
        - $ref: "#/components/parameters/event-trigger-id-property"
        - $ref: "#/components/parameters/box-id-property"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionOfInterest'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    put:
      summary: Update information related to an event trigger
      operationId: updateRegionOfInterestEventTrigger
      tags:
        - RegionOfInterestEventTriggers
      parameters:
        - $ref: "#/components/parameters/event-trigger-id-property"
        - $ref: "#/components/parameters/box-id-property"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegionOfInterest'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionOfInterest'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    delete:
      summary: Delete an event trigger
      operationId: deleteRegionOfInterestEventTrigger
      tags:
        - RegionOfInterestEventTriggers
      parameters:
        - $ref: "#/components/parameters/event-trigger-id-property"
        - $ref: "#/components/parameters/box-id-property"
      responses:
        '204':
          description: Expected response to a valid request
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
# The UUID of the status is equal to the UUID of the box
  /status/{statusId}:
    get:
      summary: Retrieve an individual status
      operationId: getStatusForId
      tags:
        - Telemetry
      parameters:
        - $ref: "#/components/parameters/status-id-property"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoxStatus'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
  
  /solutions:
    get:
      summary: Retrieves all the available solutions 
      operationId: getSolutions
      tags:
        - SolutionConfiguration
      responses:
        '200':
          description: All Solutions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Solution"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"

  
  /boxes/{boxId}/solutionConfiguration:
    get:
      summary: Retrieves the solution configuration
      operationId: getSolutionConfiguration
      tags:
        - SolutionConfiguration
      parameters:
        - $ref: "#/components/parameters/box-id-property"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TrafficMonitoringSolution' #more to come
        '404':
           description: No enabled solution
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    put:
      summary: Set a solution configuration
      operationId: setSolutionConfiguration
      tags:
        - SolutionConfiguration
      parameters:
        - $ref: "#/components/parameters/box-id-property"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/TrafficMonitoringSolution'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TrafficMonitoringSolution'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
    delete:
      summary: Deletes a solution configuration (disables it)
      operationId: deleteSolutionConfiguration
      tags:
       - SolutionConfiguration
      parameters:
        - $ref: "#/components/parameters/box-id-property"
      responses:
        '204':
          description: Expected response to a valid request
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "../schemas/commons.yaml#/components/schemas/Error"
      
    

components:
  schemas:
    Solution:
      type: string
      enum:
        - TrafficMonitoring
        # More to come

    SolutionConfiguration:
      type: object
      required:
        - solutionType
      properties:
        solutionType: 
          type: object 
          $ref: "#/components/schemas/Solution"
      discriminator:
        propertyName: solutionType     

    TrafficMonitoringSolution:
      allOf:
        - $ref: "#/components/schemas/SolutionConfiguration"
      type: object
      properties:
        zones: #basically the UUIDS of regions of interest, could also be a URI (but that might be more inconvenient), we could also embed the complete information and just do $ref: '#/components/schemas/RegionOfInterest'
          type: array
          items:
            type: string
            format: uuid

    Box:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-faker: random.uuid
          example: 676cac42-f3d6-416d-ac83-3f54f1c0bb43
        name:
          type: string
          description: Friendly name of the box
          x-faker: address.streetAddress
          example: 7th NE parking garage entrance
        model:
          type: string
          enum:
            - person-detector-demo-standard-fast
            - traffic-detector-urban-standard-fast
            - traffic-detector-parking-standard-large
            - traffic-detector-urban-fisheye-fast
            - head-detector-retail-standard
            - face-detector-demo-standard-fast
        solution:
          readonly: true
          type: object 
          $ref: "#/components/schemas/Solution"
        type:
          type: string
          description: The swarm perception box type
          example: P100
        version:
          type: string
          description: The version running on the box
          x-faker: system.semver
          example: 1.0.0
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        mqttConfigurationId:
          type: string
          format: uuid
          x-faker: random.uuid
          description: The uuid for the configuration item
          nullable: true
        cameraConfigurationId:
          type: string
          format: uuid
          x-faker: random.uuid
          description: The uuid for the configuration item
          nullable: true
        statusId:
          type: string
          format: uuid
          x-faker: random.uuid
          example: 6b8245ee-226b-11ea-978f-2e728ce88125
          description: The uuid for the status item
    Tag:
      type: object
      properties:
        name:
          type: string
          x-faker: company.companyName
          example: Roxxon Energy Corporation

    ConnectionConfiguration:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-faker: random.uuid
        status:
          type: string
          enum:
            - desired
            - deployed
          example: deployed
        username:
          type: string
          example: user
        password:
          type: string
          example: password
        host:
          type: string
          example: 192.168.0.100
        port:
          type: integer
          example: 554
        path:
          type: string
          example: live.sdp

    MqttConfiguration:
      type: object
      allOf:
        - $ref: '#/components/schemas/ConnectionConfiguration'
      properties:
        topic:
          type: string

    CameraConfiguration:
      type: object
      allOf:
        - $ref: '#/components/schemas/ConnectionConfiguration'
      properties:
        eventTriggers:
          type: array
          items:
            type: string
            format: uuid
            
    EventTriggers:
      type: object
      properties:
        crossingLines:
          type: array
          items:
            $ref: '#/components/schemas/CrossingLine'
        regionOfInterests:
          type: array
          items:
            $ref: '#/components/schemas/RegionOfInterest'   
        heatMap:
          $ref: '#/components/schemas/HeatMap'
             
    HeatMap:
      type: object
      properties:
        enabled:
          type: boolean
    
    CrossingLine:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 8th SE crosswalk
        coordinates:
          type: object
          properties:
            pointA:
              $ref: '#/components/schemas/Relative2dPoint'
            pointB:
              $ref: '#/components/schemas/Relative2dPoint'

    RegionOfInterest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Bike parking spots
        coordinates:
          type: object
          properties:
            pointA:
              $ref: '#/components/schemas/Relative2dPoint'
            pointB:
              $ref: '#/components/schemas/Relative2dPoint'
            pointC:
              $ref: '#/components/schemas/Relative2dPoint'
            pointD:
              $ref: '#/components/schemas/Relative2dPoint'

    RelativePoint:
      type: number
      format: double
      minimum: 0
      maximum: 1
      example: 0.234

    Relative2dPoint:
      type: object
      properties:
        x:
          $ref: '#/components/schemas/RelativePoint'
        y:
          $ref: '#/components/schemas/RelativePoint'

    Image:
      type: object
      description: Base64 encoded image.
      required:
        - encodedImage
      properties:
        encodedImage:
          type: string
          format: byte
          description: Base64 encoded image.
        width:
          type: integer
          example: 1280
          description: Image width.
        heigth:
          type: integer
          example: 720
          description: Image heigth.

    BoxStatus:
      type: object
      properties:
        connectionState:
          type: string
          enum:
            - CONNECTED
            - DISCONNECTED

  parameters:
    box-id-property:
      description: A guid representing the unique box id
      name: boxId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    configuration-id-property:
      description: A guid representing the unique configuration id
      name: configurationId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    event-trigger-id-property:
      description: A guid representing the unique event trigger id
      name: eventTriggerId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    status-id-property:
      description: A guid representing the unique status id
      name: statusId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    # pagination
    offset-property:
      description: An offset to start with the paginated response.
      name: offset
      in: query
      schema:
        type: integer
        example: 40
    limit-property:
      description: How many items to show. Used for pagination.
      name: limit
      in: query
      schema:
        type: integer
        example: 40

  securitySchemes:
    oauth2:
      $ref: "../schemas/commons.yaml#/securitySchemes/oauth2"
